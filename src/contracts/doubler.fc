#include "imports/stdlib.fc";

;; op-codes
const int op::bet = 1001;
const int op::win = 1002;

;; errors
const int error::min_bet = 501;
const int error::insufficient_balance = 501;

const int min_bet = 100000000; ;; 0.1 TON

int slices_equal? (slice a, slice b) asm "SDEQ";
    
() recv_internal (int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    var cs = in_msg_full.begin_parse();
    
    var flags = cs~load_uint(4);

    if (flags & 1) {
        return ();
    }
    
    slice sender = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::bet) {
        throw_if(error::min_bet, msg_value < min_bet);
        throw_if(error::insufficient_balance, msg_value * 2 > my_balance);

        randomize_lt();
    
        int x = rand(10000);

        if (x < 5000) { 
            send_raw_message(
                begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(sender)
                    .store_coins(msg_value)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .store_uint(op::win, 32)
                    .store_uint(query_id, 64)
                .end_cell(),
                64
            );
        }
    }
}